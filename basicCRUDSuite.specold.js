// Generated by Selenium IDE
// const { Builder, By, Key, until } = require('selenium-webdriver')
// const assert = require('assert')
import { Builder, By, Key, until } from 'selenium-webdriver';
import assert from 'assert';
import axios from "axios";

// New Code
async function waitForServerReady(url, timeout = 10000) {
  const start = Date.now();
  while (Date.now() - start < timeout) {
    try {
      await axios.get(url);
      return true;
    } catch {
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }
  throw new Error("Server did not become ready in time");
}
// New code end


describe('Basic CRUD Suite', function() {
  this.timeout(60000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()

    // New Code
    // driver = await new Builder().forBrowser('MicrosoftEdge').build();
    await waitForServerReady('http://localhost:3000');
    // New code end

    vars = {};
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('CreatePostTest', async function() {
    // Test name: CreatePostTest
    // Step # | name | target | value
    // 1 | open | http://localhost:3000 | 
    await driver.get("http://localhost:3000")
    // 2 | click | id=newPostBtn | 
    // Go to new post page
    await driver.findElement(By.id("newPostBtn")).click()
    // 3 | type | name=title | Devops Exp 4
    // Enter title of new post
    await driver.findElement(By.name("title")).sendKeys("Devops Exp 4.1")
    // 4 | type | name=content | This is basic testing of new post route on server
    // Enter content of new post
    await driver.findElement(By.name("content")).sendKeys("This is basic testing of new post route on server")
    // 5 | type | name=author | Rehan Fargose
    // Enter author of new post
    await driver.findElement(By.name("author")).sendKeys("Rehan Fargose")
    // 6 | click | css=.full-width | 
    // Create a new post
    await driver.findElement(By.css(".full-width")).click()
    // 7 | pause | 3000 | 
    //  induce delay
    await driver.sleep(3000)
    // 8 | assertText | xpath=//ul/li/h2[contains(text(), 'Devops Exp 4.1')] | Devops Exp 4.1
    // Test if the title is correct/matches the new post
    assert(await driver.findElement(By.xpath("//ul/li/h2[contains(text(), \'Devops Exp 4.1\')]")).getText() == "Devops Exp 4.1")
    // 9 | click | xpath=//h2[contains(text(), 'Devops Exp 4.1')]/../a[@class='delete'] | Devops Exp 4.1
    // Deleting the Post
    await driver.findElement(By.xpath("//h2[contains(text(), \'Devops Exp 4.1\')]/../a[@class=\'delete\']")).click()
  })
  it('DeletePostTest', async function() {
    // Test name: DeletePostTest
    // Step # | name | target | value
    // 1 | open | http://localhost:3000 | 
    await driver.get("http://localhost:3000")
    // 2 | click | id=newPostBtn | 
    // Go to new post page
    await driver.findElement(By.id("newPostBtn")).click()
    // 3 | type | name=title | Devops Exp 4.1
    // Enter title of new post
    await driver.findElement(By.name("title")).sendKeys("Devops Exp 4.1")
    // 4 | type | name=content | This is basic testing of new post route on server
    // Enter content of new post
    await driver.findElement(By.name("content")).sendKeys("This is basic testing of new post route on server")
    // 5 | type | name=author | Rehan Fargose
    // Enter author of new post
    await driver.findElement(By.name("author")).sendKeys("Rehan Fargose")
    // 6 | click | css=.full-width | 
    // Create a new post
    await driver.findElement(By.css(".full-width")).click()
    // 7 | pause | 3000 | 
    //  induce delay
    await driver.sleep(3000)
    // 8 | assertText | xpath=//ul/li/h2[contains(text(), 'Devops Exp 4.1')] | Devops Exp 4.1
    // Test if the title is correct/matches the new post which will soon be deleted
    assert(await driver.findElement(By.xpath("//ul/li/h2[contains(text(), \'Devops Exp 4.1\')]")).getText() == "Devops Exp 4.1")
    // 9 | click | xpath=//h2[contains(text(), 'Devops Exp 4.1')]/../a[@class='delete'] | Devops Exp 4.1
    // Deleting the Post
    await driver.findElement(By.xpath("//h2[contains(text(), \'Devops Exp 4.2\')]/../a[@class=\'delete\']")).click()
    // 10 | waitForElementNotPresent | xpath=//h2[contains(text(), 'Devops Exp 4.1')] | Devops Exp 4.1
    // Wait for DOM to update
    await driver.wait(until.stalenessOf(await driver.findElement(By.xpath("//h2[contains(text(), \'Devops Exp 4.1\')]"))), NaN)
    // 11 | assertElementNotPresent | xpath=//h2[contains(text(), 'Devops Exp 4.1')] | Devops Exp 4.1
    // Assert/Check if Post is deleted
    {
      const elements = await driver.findElements(By.xpath("//h2[contains(text(), \'Devops Exp 4.1\')]"))
      assert(!elements.length)
    }
  })
  it('UpdatePostTest', async function() {
    // Test name: UpdatePostTest
    // Step # | name | target | value
    // 1 | open | http://localhost:3000 | 
    await driver.get("http://localhost:3000")
    // 2 | click | id=newPostBtn | 
    // Go to new post page
    await driver.findElement(By.id("newPostBtn")).click()
    // 3 | type | name=title | Devops Exp 4
    // Enter title of new post
    await driver.findElement(By.name("title")).sendKeys("Devops Exp 4.3")
    // 4 | type | name=content | This is basic testing of new post route on server
    // Enter content of new post
    await driver.findElement(By.name("content")).sendKeys("This is basic testing of new post route on server")
    // 5 | type | name=author | Rehan Fargose
    // Enter author of new post
    await driver.findElement(By.name("author")).sendKeys("Rehan Fargose")
    // 6 | click | css=.full-width | 
    // Create a new post
    await driver.findElement(By.css(".full-width")).click()
    // 7 | pause | 3000 | 
    //  induce delay
    await driver.sleep(3000)
    // 8 | waitForElementPresent | xpath=//ul[@id="postsList"]/li/h2[contains(text(), 'Devops Exp 4.3')] | Devops Exp 4.3
    // Check for the target post's existence
    await driver.wait(until.elementLocated(By.xpath("//ul[@id=\"postsList\"]/li/h2[contains(text(), \'Devops Exp 4.3\')]")), NaN)
    // 9 | pause | 2000 | 
    // Pause to let the DOM load
    await driver.sleep(2000)
    // 10 | click | xpath=//ul[@id="postsList"]/li[h2[contains(text(), 'Devops Exp 4.3')]]/a[@class="edit"] | 
    // Go to Edit Page by clicking the button
    await driver.findElement(By.xpath("//ul[@id=\"postsList\"]/li[h2[contains(text(), \'Devops Exp 4.3\')]]/a[@class=\"edit\"]")).click()
    // 11 | type | name=title | Devops Exp 4 updated
    // Update title of post
    await driver.findElement(By.name("title")).sendKeys("Devops Exp 4.3 updated")
    // 12 | type | name=content | Updating this post
    // Update content of post
    await driver.findElement(By.name("content")).sendKeys("Updating this post")
    // 13 | type | name=author | Rehan Fargose2
    // Update author of post
    await driver.findElement(By.name("author")).sendKeys("Rehan Fargose2")
    // 14 | click | css=.full-width | 
    // Submit edited changes
    await driver.findElement(By.css(".full-width")).click()
    // 15 | pause | 3000 | 
    //  induce delay
    await driver.sleep(3000)
    // 16 | assertText | xpath=//ul/li/h2[contains(text(), 'Devops Exp 4 updated')] | Devops Exp 4 updated
    // Test if the title is correct/matches the updated post
    assert(await driver.findElement(By.xpath("//ul/li/h2[contains(text(), \'Devops Exp 4.3 updated\')]")).getText() == "Devops Exp 4.3 updated")
    // 17 | click | xpath=//h2[contains(text(), 'Devops Exp 4')]/../a[@class='delete'] | Devops Exp 4 updated
    // Deleting the Post
    await driver.findElement(By.xpath("//h2[contains(text(), \'Devops Exp 4.3\')]/../a[@class=\'delete\']")).click()
  })
  it('DeleteAllTest', async function() {
    // Test name: DeleteAllTest
    // Step # | name | target | value
    // 1 | open | http://localhost:3000 | 
    await driver.get("http://localhost:3000")
    // 2 | waitForElementPresent | id=postsList  | 3000
    // Wait for Posts List to render
    await driver.wait(until.elementLocated(By.id("postsList")), 3000)
    // 3 | pause | 3000 | 
    await driver.sleep(3000)
    // 4 | assertElementPresent | id=postsList  | 
    {
      const elements = await driver.findElements(By.id("postsList"))
      assert(elements.length)
    }
    // 5 | click | xpath=//div[@class='actions']/a[contains(text(), 'Delete All')]  | 
    // Delete All Posts
    await driver.findElement(By.xpath("//div[@class=\'actions\']/a[contains(text(), \'Delete All\')] ")).click()
    // 6 | pause | 3000 | 
    await driver.sleep(3000)
    // 7 | waitForElementNotPresent | id=postsList | 3000
    // Check if Post's list is present
    await driver.wait(until.stalenessOf(await driver.findElement(By.id("postsList"))), 3000)
    // 8 | assertText | xpath=//div[@class='no-posts']/p | No posts available. Start by creating a new one!
    // Check if any posts exist
    assert(await driver.findElement(By.xpath("//div[@class=\'no-posts\']/p")).getText() == "No posts available. Start by creating a new one!")
  })
})
